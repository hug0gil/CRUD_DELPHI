unit FichaLineasAlbaran;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FichaBase, Vcl.StdCtrls, Vcl.ExtCtrls,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.Client, Data.DB,
  FireDAC.Comp.DataSet;

type
  TFormFichaLineasAlbaran = class(TFormFichaBase)
    PanelOrden: TPanel;
    LabelOrden: TLabel;
    EditOrden: TEdit;
    Panel1: TPanel;
    Label1: TLabel;
    Panel2: TPanel;
    Label2: TLabel;
    EditPrecio: TEdit;
    Panel3: TPanel;
    Label3: TLabel;
    EditCantidad: TEdit;
    Panel4: TPanel;
    Label4: TLabel;
    EditTotal: TEdit;
    ComboBoxCodArticulo: TComboBox;
    FDQueryLineasAlb: TFDQuery;
    FDTransactionLineasAlb: TFDTransaction;
    procedure EditCantidadChange(Sender: TObject);
    procedure EditPrecioChange(Sender: TObject);
    procedure btnAceptarClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    Opcion: Integer;
    constructor Create(AOwner: TComponent; CodigoAlbaran: Integer;
      PosLinea: Integer; Modo: Integer); reintroduce; overload;

  end;

var
  FormFichaLineasAlbaran: TFormFichaLineasAlbaran;

implementation

{$R *.dfm}
{ TFormFichaLineasAlbaran }

procedure TFormFichaLineasAlbaran.btnAceptarClick(Sender: TObject);
var
  StockDisponible: Integer;
begin
  if Opcion = 3 then
    Self.Close;
else
begin
  // Verificar si la cantidad solicitada no excede el stock
  FDQueryLineasAlb.SQL.Text :=
    'SELECT NSTOCK FROM ARTICULOS WHERE CCODIGO = :CodigoArt';
  FDQueryLineasAlb.ParamByName('CodigoArt').AsString :=
    ComboBoxCodArticulo.Text;
  FDQueryLineasAlb.Open;

  if not FDQueryLineasAlb.Eof then
  begin
    StockDisponible := FDQueryLineasAlb.FieldByName('NSTOCK').AsInteger;

    if StrToFloat(EditCantidad.Text) > StockDisponible then
    begin
      MessageDlg('La cantidad solicitada excede el stock disponible (' +
        IntToStr(StockDisponible) + ' unidades).', mtError, [mbOK], 0);
      Exit;
    end;
  end
  else
  begin
    MessageDlg('El artículo no existe o no tiene stock.', mtError, [mbOK], 0);
    Exit;
  end;

  try
    // Dependiendo de la opción (agregar o actualizar línea)
    case Opcion of
      1: // Agregar nueva línea de albarán
        begin
          if not FDTransactionLineasAlb.Active then
            FDTransactionLineasAlb.StartTransaction;
          FDQueryLineasAlb.SQL.Text :=
            'INSERT INTO LINEAS_ALB (NCOD_ALBARAN, CCOD_ARTICULO, NCANTIDAD, NPRECIO, NORDEN) '
            + 'VALUES (:CodigoAlb, :CodigoArt, :Cantidad, :Precio, :Orden)';
          FDQueryLineasAlb.ParamByName('CodigoAlb').AsInteger :=
            StrToInt(EditCodigo.Text);
        end;
      2: // Actualizar línea de albarán
        begin
          FDQueryLineasAlb.SQL.Text :=
            'UPDATE LINEAS_ALB SET CCOD_ARTICULO = :CodigoArt, NCANTIDAD = :Cantidad, '
            + 'NPRECIO = :Precio, NORDEN = :Orden WHERE NCOD_ALBARAN = :CodigoAlb';
          FDQueryLineasAlb.ParamByName('CodigoAlb').AsInteger :=
            StrToInt(EditCodigo.Text);
        end;
    end;

    // Parametrizar la consulta
    FDQueryLineasAlb.ParamByName('CodigoArt').AsString :=
      ComboBoxCodArticulo.Text;
    FDQueryLineasAlb.ParamByName('Cantidad').AsFloat :=
      StrToFloat(EditCantidad.Text);
    FDQueryLineasAlb.ParamByName('Precio').AsFloat :=
      StrToFloat(EditPrecio.Text);
    FDQueryLineasAlb.ParamByName('Orden').AsInteger := StrToInt(EditOrden.Text);

    FDQueryLineasAlb.ExecSQL;
    FDTransactionLineasAlb.Commit;
    Self.Close;
  except
    on E: Exception do
    begin
      FDTransactionLineasAlb.Rollback;
      MessageDlg('Error en la operación: ' + E.Message, mtError, [mbOK], 0);
    end;
  end;
end;
end;

constructor TFormFichaLineasAlbaran.Create(AOwner: TComponent;
  CodigoAlbaran, PosLinea, Modo: Integer);
begin
  inherited Create(AOwner);
  EditCodigo.Text := IntToStr(CodigoAlbaran);
  if PosLinea = 0 then
    Inc(PosLinea);

  EditOrden.Text := IntToStr(PosLinea);
  Opcion := Modo;

  case Modo of
    1:
      lblTitulo.Caption := 'Añadir nueva línea de albarán';
    2:
      lblTitulo.Caption := 'Actualizar línea de albarán';
    3:
      lblTitulo.Caption := 'Información línea de albarán';
  end;

end;

procedure TFormFichaLineasAlbaran.EditPrecioChange(Sender: TObject);
begin

  EditTotal.Text := FloatToStr(StrToFloat((EditCantidad.Text)) *
    StrToFloat((EditPrecio.Text)))
end;

procedure TFormFichaLineasAlbaran.EditCantidadChange(Sender: TObject);
begin

  EditTotal.Text := FloatToStr(StrToFloat((EditCantidad.Text)) *
    StrToFloat((EditPrecio.Text)))

end;

end.
