unit FichaAlbaran;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs,
  FichaBase, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.ComCtrls, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client, ModuloDatos;

type
  TFormFichaAlbaran = class(TFormFichaBase)
    PanelFecha: TPanel;
    LabelFecha: TLabel;
    DateTimePickerFecha: TDateTimePicker;
    PanelObservaciones: TPanel;
    LabelObservaciones: TLabel;
    PanelCodCliente: TPanel;
    LabelCodCliente: TLabel;
    ComboBoxCodCliente: TComboBox;
    MemoObservaciones: TMemo;
    FDTransactionAlbaran: TFDTransaction;
    FDQueryAlbaran: TFDQuery;

    constructor Create(AOwner: TComponent; LastCode: Integer; mode: Integer);
      reintroduce; overload;
    procedure btnAceptarClick(Sender: TObject);
    function TodoCorrecto(): Boolean;

  private
    { Private declarations }
  public
    { Public declarations }
    opcion: Integer;
    CodigoNuevo: Integer;
  end;

implementation

{$R *.dfm}
{ TFormFichaAlbaran }

procedure TFormFichaAlbaran.btnAceptarClick(Sender: TObject);
var
  FechaFormateada: string;
  ClienteID: Integer;
begin
  if opcion = 3 then
  begin
    Self.Close;
  end
  else if TodoCorrecto then

    try
      // Convertir fecha a formato YYYY-MM-DD para compatibilidad con SQL
      FechaFormateada := FormatDateTime('YYYY-MM-DD', DateTimePickerFecha.Date);

      // Validar y obtener el código de cliente
      if TryStrToInt(ComboBoxCodCliente.Text, ClienteID) = False then
      begin
        MessageDlg('Código de cliente inválido.', mtError, [mbOK], 0);
        Exit;
      end;

      // Iniciar la transacción solo si no está activa
      if not FDTransactionAlbaran.Active then
        FDTransactionAlbaran.StartTransaction;

      // Preparar la consulta según la operación
      FDQueryAlbaran.Close; // Cerrar la consulta antes de asignar nueva SQL
      case opcion of
        1: // Agregar nuevo albarán
          begin
            FDQueryAlbaran.SQL.Text :=
              'INSERT INTO ALBARAN (NCODIGO, DFECHA, COBSERVACIONES, NCOD_CLIENTE) '
              + 'VALUES (:Codigo, :Fecha, :Observaciones, :Cliente)';
            FDQueryAlbaran.ParamByName('Codigo').AsInteger := CodigoNuevo;
          end;

        2: // Actualizar albarán
          begin
            FDQueryAlbaran.SQL.Text :=
              'UPDATE ALBARAN SET DFECHA = :Fecha, COBSERVACIONES = :Observaciones, '
              + 'NCOD_CLIENTE = :Cliente WHERE NCODIGO = :Codigo';
            FDQueryAlbaran.ParamByName('Codigo').AsInteger :=
              StrToInt(EditCodigo.Text);
          end;
      end;

      // Asignar parámetros comunes
      FDQueryAlbaran.ParamByName('Fecha').AsString := FechaFormateada;
      FDQueryAlbaran.ParamByName('Observaciones').AsString :=
        MemoObservaciones.Lines.Text;
      FDQueryAlbaran.ParamByName('Cliente').AsInteger := ClienteID;

      // Ejecutar consulta
      FDQueryAlbaran.ExecSQL;

      // Confirmar cambios en la base de datos
      FDTransactionAlbaran.Commit;

      // Cerrar formulario después de completar la acción
      Self.Close;

    except
      on E: Exception do
      begin
        FDTransactionAlbaran.Rollback; // Revertir cambios en caso de error
        MessageDlg('Error en la operación: ' + E.Message, mtError, [mbOK], 0);
      end;
    end;
end;

constructor TFormFichaAlbaran.Create(AOwner: TComponent; LastCode: Integer;
  mode: Integer);
begin
  inherited Create(AOwner, LastCode, mode);
  // Llamar al constructor de la clase base

  opcion := mode;
  CodigoNuevo := LastCode;

  case mode of
    1:
      begin
        lblTitulo.Caption := 'Agregar nuevo albarán';
        Self.Caption := 'Añadir';
      end;
    2:
      begin
        lblTitulo.Caption := 'Actualizar albarán';
        Self.Caption := 'Actualizar';
      end;
    3:
      begin
        Self.Caption := 'Información';
        lblTitulo.Caption := 'Información del albarán seleccionado';
        DateTimePickerFecha.Enabled := False;
        MemoObservaciones.ReadOnly := True;
        ComboBoxCodCliente.Enabled := False;
      end;
  end;
end;

function TFormFichaClientes.TodoCorrecto: Boolean;
var
  correcto: Boolean;
begin
  correcto := True;

  // Verificar que los campos requeridos no estén vacíos
  if (EditNombre.Text = '') or (ComboBoxRegimen.ItemIndex = -1) then
  begin
    MessageDlg('Por favor, rellene todos los campos.', mtError, [mbOK], 0);
    correcto := False;
    Exit;
  end;

  // Verificar que el combo de régimen tiene un valor válido
  if ComboBoxRegimen.ItemIndex = -1 then
  begin
    MessageDlg('Seleccione un régimen fiscal válido.', mtError, [mbOK], 0);
    correcto := False;
    Exit;
  end;

  // Verificar que la fecha no esté vacía
  if DateTimePickerFecha.Date = 0 then
  begin
    MessageDlg('Por favor, seleccione una fecha.', mtError, [mbOK], 0);
    correcto := False;
    Exit;
  end;

  Result := correcto;
end;


end.
