unit FichaArticulos;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FichaBase, Vcl.StdCtrls, Vcl.ExtCtrls,
  FireDAC.Comp.Client, FireDAC.Stan.Param, FireDAC.Comp.DataSet,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  Data.DB;

type
  TFormFichaArticulos = class(TFormFichaBase)
    PanelNombre: TPanel;
    LabelNombre: TLabel;
    EditNombre: TEdit;
    PanelIVA: TPanel;
    LabelIVA: TLabel;
    PanelStock: TPanel;
    LabelStock: TLabel;
    EditStock: TEdit;
    FDQueryArticulos: TFDQuery;
    FDTransactionArticulos: TFDTransaction;
    ComboBoxIVA: TComboBox;
    // Asegúrate de tener un campo para el código de artículo

    procedure btnAceptarClick(Sender: TObject);
    function TodoCorrecto: Boolean;
    function getCodigoIVA(ObservacionIVA: String): Integer;
  private
    { Private declarations }
    function CodigoExiste(Codigo: String): Boolean;
    // Función para verificar si el código ya existe
  public
    { Public declarations }
    opcion: Integer;
    constructor Create(AOwner: TComponent; CodigoArticulo: String;
      Modo: Integer); reintroduce; overload;
  end;

implementation

{$R *.dfm}

uses ModuloDatos;

{ TFormFichaArticulos }

function TFormFichaArticulos.CodigoExiste(Codigo: String): Boolean;
var
  Query: TFDQuery;
begin
  Result := False;
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := ModuloDatos.DataModuleBDD.DataBaseFDConnection;
    Query.SQL.Text := 'SELECT * FROM ARTICULOS WHERE CCODIGO = :Codigo';
    Query.ParamByName('Codigo').AsString := Codigo;
    Query.Open;

    if not Query.IsEmpty then
      Result := True;
  finally
    Query.Free;
  end;
end;

procedure TFormFichaArticulos.btnAceptarClick(Sender: TObject);
begin
  if not TodoCorrecto then
    Exit; // Si hay error en la validación, detenemos el proceso.

  try
    FDTransactionArticulos.StartTransaction;

    case opcion of
      1: // Agregar un nuevo artículo
        begin
          FDQueryArticulos.SQL.Text :=
            'INSERT INTO ARTICULOS (CCODIGO, CNOMBRE, NSTOCK, NCOD_IVA) ' +
            'VALUES (:Codigo, :Nombre, :Stock, :IVA)';
          FDQueryArticulos.ParamByName('Codigo').AsString := EditCodigo.Text;
          FDQueryArticulos.ParamByName('Nombre').AsString := EditNombre.Text;
          FDQueryArticulos.ParamByName('Stock').AsFloat :=
            StrToFloat(EditStock.Text);
          FDQueryArticulos.ParamByName('IVA').AsInteger :=
            getCodigoIVA(ComboBoxIVA.Text);
        end;
      2: // Actualizar un artículo
        begin
          FDQueryArticulos.SQL.Text :=
            'UPDATE ARTICULOS SET CNOMBRE = :Nombre, NSTOCK = :Stock, NCOD_IVA = :IVA WHERE CCODIGO = :Codigo';
          FDQueryArticulos.ParamByName('Codigo').AsString := EditCodigo.Text;
          FDQueryArticulos.ParamByName('Nombre').AsString := EditNombre.Text;
          FDQueryArticulos.ParamByName('Stock').AsFloat :=
            StrToFloat(EditStock.Text);
          FDQueryArticulos.ParamByName('IVA').AsInteger :=
            getCodigoIVA(ComboBoxIVA.Text);
        end;
    end;

    FDQueryArticulos.ExecSQL;
    FDTransactionArticulos.Commit;
    Self.Close;
  except
    on E: Exception do
    begin
      FDTransactionArticulos.Rollback;
      MessageDlg('Error al guardar los datos: ' + E.Message, mtError, [mbOK], 0);
    end;
  end;
end;


constructor TFormFichaArticulos.Create(AOwner: TComponent;
  CodigoArticulo: String; Modo: Integer);
begin
  inherited Create(AOwner);
  opcion := Modo;
  EditCodigo.Text := CodigoArticulo;

  FDQueryArticulos.Close;
  FDQueryArticulos.SQL.Text := 'SELECT CDESCRIPCION FROM TIPOS_IVA';
  FDQueryArticulos.Open;

  ComboBoxIVA.Clear;

  while not FDQueryArticulos.Eof do
  begin
    ComboBoxIVA.Items.Add(FDQueryArticulos.FieldByName('CDESCRIPCION').AsString);
    FDQueryArticulos.Next;
  end;
end;


function TFormFichaArticulos.getCodigoIVA(ObservacionIVA: String): Integer;
var
  FDQueryIVA: TFDQuery;
begin
  Result := -1; // Valor por defecto si no se encuentra el código

  FDQueryIVA := TFDQuery.Create(nil);
  try
    FDQueryIVA.Connection := ModuloDatos.DataModuleBDD.DataBaseFDConnection;
    FDQueryIVA.SQL.Text :=
      'SELECT NCODIGO FROM TIPOS_IVA WHERE CDESCRIPCION = :ObservacionIVA';
    FDQueryIVA.ParamByName('ObservacionIVA').AsString := ObservacionIVA;
    FDQueryIVA.Open;

    if not FDQueryIVA.Eof then
      Result := FDQueryIVA.FieldByName('NCODIGO').AsInteger;
  finally
    FDQueryIVA.Free;
  end;
end;

function TFormFichaArticulos.TodoCorrecto: Boolean;
var
  IVA: Integer;
  Stock: Double;
begin
  Result := True;

  if (Length(EditCodigo.Text) > 5) then
  begin
    MessageDlg
      ('El código del artículo no puede tener más de 5 caracteres alfanuméricos. Por favor, ingrese un código válido.',
      mtError, [mbOK], 0);
    Result := False;

  end;

  if (opcion = 1) and CodigoExiste(EditCodigo.Text) then
  begin
    MessageDlg
      ('El código del artículo ya existe. Por favor, ingrese un código único.',
      mtError, [mbOK], 0);
    Result := False;

  end;

  // Verificar que los campos requeridos no estén vacíos
  if (EditNombre.Text = '') or (ComboBoxIVA.Text = '') or (EditStock.Text = '')
    or (EditCodigo.Text = '') then
  begin
    MessageDlg('Por favor, rellene todos los campos.', mtError, [mbOK], 0);
    Result := False;

  end;



  // Verificar que el Stock sea un número flotante válido
  if not TryStrToFloat(EditStock.Text, Stock) then
  begin
    MessageDlg('El valor del Stock debe ser un número flotante.', mtError,
      [mbOK], 0);
    Result := False;

  end;

  if Stock < 0 then
  begin
    MessageDlg('El valor del Stock no puede ser negativo.', mtError, [mbOK], 0);
    Result := False;

  end;
end;

end.
