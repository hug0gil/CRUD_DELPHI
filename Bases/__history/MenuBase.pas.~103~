unit MenuBase;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.ExtCtrls, Vcl.Buttons,
  Vcl.DBCtrls, Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, ModuloDatos;

type
  TFormMenuBase = class(TForm)
    Panel1: TPanel;
    btnActualizar: TButton;
    btnAgregar: TButton;
    Shape1: TShape;
    Panel2: TPanel;
    DBGrid: TDBGrid;
    DBNavigator: TDBNavigator;
    btnEliminar: TButton;
    btnVer: TButton;
    FDTable: TFDTable;
    DataSource: TDataSource;
    FDTransactionTable: TFDTransaction;
    procedure DBNavigatorClick(Sender: TObject; Button: TNavigateBtn);
    function GetLastCodigo(const PrimaryKey: String;
      const TableName: String): Integer;
    procedure FormActivate(Sender: TObject);
    procedure btnActualizarClick(Sender: TObject);
    procedure btnVerClick(Sender: TObject);
    procedure btnEliminarClick(Sender: TObject);
    procedure btnAgregarClick(Sender: TObject);
    procedure actualizarVista();
  private
    { Private declarations }
  public
    { Public declarations }
    UltimoCodigo: Integer;
  end;

implementation

{$R *.dfm}

function TFormMenuBase.GetLastCodigo(const PrimaryKey: String;
  const TableName: String): Integer;
var
  FDQuery: TFDQuery;
begin
  FDQuery := TFDQuery.Create(nil);
  try
    FDQuery.Connection := ModuloDatos.DataModuleBDD.DataBaseFDConnection;
    FDQuery.SQL.Text := 'SELECT MAX(' + PrimaryKey + ') FROM ' + TableName;
    FDQuery.Open;

    if FDQuery.Fields[0].IsNull then
      Result := 1
    else
      Result := (FDQuery.Fields[0].AsInteger + 1);
  finally
    FDQuery.Free;
  end;
end;

procedure TFormMenuBase.actualizarVista;
begin
FDTransactionTable.Commit;
  FDTable.Close;
  FDTable.Open;
  DataSource.DataSet.Refresh;
  DBGrid.Refresh;
end;

procedure TFormMenuBase.btnActualizarClick(Sender: TObject);
begin
  // Actualizar
end;

procedure TFormMenuBase.btnAgregarClick(Sender: TObject);
begin
  // Agregar
end;

procedure TFormMenuBase.btnEliminarClick(Sender: TObject);
begin
  // Eliminar
end;

procedure TFormMenuBase.btnVerClick(Sender: TObject);
begin
  // Ver
end;

procedure TFormMenuBase.DBNavigatorClick(Sender: TObject; Button: TNavigateBtn);
begin
  case Button of
    nbPost:
      begin
        if not FDTransactionTable.Active then
          FDTransactionTable.StartTransaction;

        if FDTable.State in [dsEdit, dsInsert] then
          FDTable.Post;

        if FDTransactionTable.Active then
          FDTransactionTable.Commit;
      end;

    nbCancel:
      begin
        if not FDTransactionTable.Active then
          FDTransactionTable.StartTransaction;

        if FDTable.State in [dsEdit, dsInsert] then
          FDTable.Cancel;

        if FDTransactionTable.Active then
          FDTransactionTable.Rollback;
      end;
  end;
end;

procedure TFormMenuBase.FormActivate(Sender: TObject);
begin
  FDTransactionTable.StartTransaction;
  FDTable.Active := True;
end;

end.
